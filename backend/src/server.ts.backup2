// =============================================
// SERVER.TS MINIMAL - backend/src/server.ts
// =============================================

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import { env } from './config/environment';

// Import des routes
import { authRoutes } from './modules/auth/auth.routes';
import { profileRoutes } from './modules/profile/profile.routes';
import { questionnaireRoutes } from './modules/questionnaire/questionnaire.routes';
import { discoveryRoutes } from './modules/discovery/discovery.routes';
import { chatRoutes } from './modules/chat/chat.routes';
import { adminRoutes } from './modules/admin/admin.routes';
import { gamificationRoutes } from './modules/gamification/gamification.routes';

const app = express();

// ============ CONFIGURATION EXPRESS ============

// Middleware de sécurité
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https:", "wss:", "ws:"],
    },
  },
}));

// CORS
app.use(cors({
  origin: env.CORS_ORIGIN,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Body parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// ============ ROUTES API ============

app.use('/api/auth', authRoutes);
app.use('/api/profile', profileRoutes);
app.use('/api/questionnaire', questionnaireRoutes);
app.use('/api/discovery', discoveryRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/gamification', gamificationRoutes);

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    config: {
      cors_origin: env.CORS_ORIGIN,
      port: env.PORT,
      node_env: env.NODE_ENV
    }
  });
});

// Gestion des routes non trouvées
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Route not found',
    path: req.originalUrl
  });
});

// Gestion globale des erreurs
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('❌ Erreur serveur:', error);
  
  res.status(error.status || 500).json({
    success: false,
    error: 'Internal server error',
    message: env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

// ============ DÉMARRAGE SERVEUR ============

const PORT = parseInt(env.PORT) || 3001;

app.listen(PORT, () => {
  console.log('🚀 Serveur démarré !');
  console.log('📡 REST API:', `http://localhost:${PORT}`);
  console.log('🔧 Mode:', env.NODE_ENV);
  console.log('🎯 Frontend:', env.CORS_ORIGIN);
  
  // Afficher les routes disponibles
  console.log('\n📋 Routes disponibles:');
  console.log('   GET  /api/health');
  console.log('   POST /api/auth/*');
  console.log('   GET  /api/chat/*');
  console.log('\n✅ Affinia V6 Server prêt ! 🚀\n');
});

export default app;