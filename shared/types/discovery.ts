// =============================================
// MODIFICATION DISCOVERY SERVICE
// backend/src/modules/discovery/discovery.service.ts
// =============================================

// ‚ú® √Ä AJOUTER EN HAUT DU FICHIER (dans les imports)
import { chatService } from '../chat/chat.service';

// ‚ú® REMPLACER LA M√âTHODE respondToMirrorRequest PAR CELLE-CI :

/**
 * R√©pondre √† une demande de miroir - MODIFI√â AVEC INT√âGRATION CHAT
 */
async respondToMirrorRequest(
  requestId: string,
  userId: string,
  response: 'accepted' | 'rejected'
): Promise<MirrorRequestResponse> {
  try {
    console.log('üìù Mirror Response - Request:', requestId, 'Response:', response);

    // V√©rifier que la demande existe et que l'utilisateur est le receiver
    const { data: request, error: fetchError } = await supabaseAdmin
      .from('mirror_requests')
      .select(`
        id,
        sender_id,
        receiver_id,
        status,
        created_at,
        sender:profiles!mirror_requests_sender_id_fkey(name, avatar_url)
      `)
      .eq('id', requestId)
      .eq('receiver_id', userId)
      .eq('status', 'pending')
      .single();

    if (fetchError || !request) {
      return {
        success: false,
        message: 'Demande non trouv√©e ou d√©j√† trait√©e'
      };
    }

    // Mettre √† jour le statut de la demande
    const { error: updateError } = await supabaseAdmin
      .from('mirror_requests')
      .update({
        status: response,
        responded_at: new Date().toISOString()
      })
      .eq('id', requestId);

    if (updateError) {
      console.error('‚ùå Mirror Response - Erreur mise √† jour:', updateError);
      throw updateError;
    }

    // R√©cup√©rer le nom du responder pour la notification
    const { data: responderProfile } = await supabaseAdmin
      .from('profiles')
      .select('name, avatar_url')
      .eq('id', userId)
      .single();

    // üöÄ NOUVELLE FONCTIONNALIT√â : Cr√©er automatiquement une conversation si accept√©
    let conversationCreated = null;
    if (response === 'accepted') {
      try {
        console.log('ü™û‚û°Ô∏èüí¨ Miroir accept√© - Cr√©ation conversation automatique');
        
        // Cr√©er la conversation via le chat service
        conversationCreated = await chatService.createConversationFromMirrorAcceptance(
          request.sender_id, 
          userId
        );
        
        console.log('‚úÖ Conversation cr√©√©e automatiquement:', conversationCreated.id);
        
      } catch (chatError) {
        console.error('‚ùå Erreur cr√©ation conversation automatique:', chatError);
        // Ne pas faire √©chouer la r√©ponse au miroir si la conversation √©choue
      }
    }

    // Cr√©er une notification pour le sender - MODIFI√âE
    const notificationType = response === 'accepted' ? 'mirror_accepted' : 'mirror_rejected';
    const notificationMessage = response === 'accepted'
      ? `${responderProfile?.name || 'Quelqu\'un'} a accept√© votre demande de miroir.${conversationCreated ? ' Vous pouvez maintenant discuter !' : ''}`
      : `${responderProfile?.name || 'Quelqu\'un'} a refus√© votre demande de miroir`;

    const notificationPayload: any = {
      responder_id: userId,
      responder_name: responderProfile?.name,
      responder_avatar: responderProfile?.avatar_url,
      request_id: requestId,
      response: response
    };

    // Ajouter l'ID de conversation si cr√©√©e
    if (conversationCreated) {
      notificationPayload.conversation_id = conversationCreated.id;
      notificationPayload.can_start_chat = true;
    }

    const { error: notifError } = await supabaseAdmin
      .from('notifications')
      .insert({
        recipient_id: request.sender_id,
        sender_id: userId,
        type: notificationType,
        title: response === 'accepted' ? 'Demande accept√©e üéâ' : 'Demande refus√©e',
        message: notificationMessage,
        status: 'unread',
        payload: notificationPayload
      });

    if (notifError) {
      console.error('‚ùå Mirror Response - Erreur notification:', notifError);
    }

    console.log('‚úÖ Mirror Response - R√©ponse enregistr√©e:', response);

    return {
      success: true,
      message: response === 'accepted' 
        ? conversationCreated 
          ? 'Acc√®s accord√© ! Une conversation a √©t√© cr√©√©e.' 
          : 'Acc√®s accord√© !'
        : 'Demande refus√©e',
      request: {
        id: requestId,
        sender_id: request.sender_id,
        receiver_id: userId,
        responder_id: userId,
        status: response,
        response: response,
        created_at: request.created_at,
        updated_at: new Date().toISOString(),
        conversation_id: conversationCreated?.id || null // ‚Üê NOUVEAU : Retourner l'ID de la conversation
      }
    };

  } catch (error) {
    console.error('‚ùå Mirror Response - Erreur:', error);
    throw error;
  }
}

// =============================================
// AUSSI, METTRE √Ä JOUR shared/types/discovery.ts
// =============================================

/*
Dans shared/types/discovery.ts, modifier l'interface MirrorRequestResponse :

export interface MirrorRequestResponse {
  success: boolean;
  message: string;
  request?: {
    id: string;
    sender_id?: string;
    receiver_id?: string;
    responder_id?: string;
    status?: string;
    response?: string;
    created_at?: string;
    updated_at?: string;
    conversation_id?: string | null; // ‚Üê NOUVEAU : ID de la conversation cr√©√©e
  };
  can_retry_after?: string;
}
*/